/*
 * MIT License
 *
 * Copyright (c) 2023 Betuel Sevindik, Felix Baensch, Jonas Schaub, Christoph Steinbeck, and Achim Zielesny
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

plugins {
    id 'application'
}

application {
    mainClassName = 'de.unijena.cheminf.fragment.fingerprint.performanceTest.Main'
}

group 'de.unijena.cheminf.fragment.fingerprint'
version '0.0.0.1'

//sourceCompatibility = 1.17

//Creates javadoc and sources jars
java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

def cdkVersion = '2.8'
dependencies {
    implementation group: 'org.jetbrains', name : 'annotations', version: '23.0.0'
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    implementation group: 'org.openscience.cdk', name: 'cdk-bundle', version: cdkVersion
}
mainClassName = 'de.unijena.cheminf.fragment.fingerprint.performanceTest.Main'
applicationName = 'FragmentFingerprint'

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    forkEvery = 1

    testLogging {
        showStandardStreams = true
    }
}
//Needed to make the created jar archives executable
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//Creates a jar archive that includes all dependencies of the project, i.e. that  FragmentFingerprinter can be started by executing this jar
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Fragmentfingerprint Fat Jar File',
                'Implementation-Version': archiveVersion,
                'Main-Class': mainClassName
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    archiveAppendix = 'fat'
    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') && !it.name.endsWith('aarch64.jar') }.collect { zipTree(it) }
    }
    with jar
}
//Archives artifacts executed with build
artifacts {
    archives fatJar
}




