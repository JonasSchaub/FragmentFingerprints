/*
 * MIT License
 *
 * Copyright (c) 2023 Betuel Sevindik, Felix Baensch, Jonas Schaub, Christoph Steinbeck, and Achim Zielesny
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'application'
    id 'org.gradle.java'
    id 'java-library'
    id 'java'
    id("com.diffplug.spotless") version "6.19.0"
    id 'org.gradle.maven-publish'
    id 'signing'
    id("org.sonarqube") version "4.3.1.3277"
}

application {
    mainClassName = 'de.unijena.cheminf.fragment.fingerprint.performanceTest.Main'
}

group = 'io.github.jonasschaub'
archivesBaseName = 'FragmentFingerprints'
//see also version for publishing below! And do not forget to update CITATION.cff version as well!!!
version = '1.1.0.0'

//sourceCompatibility = 1.17

//Creates javadoc and sources jars
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
    }
}

def cdkVersion = '2.8'
dependencies {
    implementation group: 'org.jetbrains', name : 'annotations', version: '23.0.0'
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    implementation group: 'org.openscience.cdk', name: 'cdk-bundle', version: cdkVersion
}
mainClassName = 'de.unijena.cheminf.fragment.fingerprint.performanceTest.Main'
applicationName = 'FragmentFingerprints'

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    forkEvery = 1

    testLogging {
        showStandardStreams = true
    }
}
//Needed to make the created jar archives executable
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//Creates a jar archive that includes all dependencies of the project, i.e. that  FragmentFingerprints can be started by executing this jar
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Fragmentfingerprints Fat Jar File',
                'Implementation-Version': archiveVersion,
                'Main-Class': mainClassName
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    archiveAppendix = 'fat'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

spotless {
    java {
        encoding 'UTF-8'
        cleanthat()
        importOrder('de', 'org', 'com', 'java', 'javax')
        removeUnusedImports()
        indentWithSpaces(4) // doesn't really seem to work...
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile('License-header/License-header.txt')
        //eclipse() //not optimal, because indents with tabs..
        //googleJavaFormat() //not optimal, because indents with two spaces...
        //palantirJavaFormat() //not optimal, because unnecessary line breaks in head of for loop and corrupts editor folds
        //prettier() //needs npm installed, unsuitable...
        //clangFormat() //also needs an installation...
    }
}

sonar {
    properties {
        property("sonar.projectKey", "JonasSchaub_FragmentFingerprints")
        property("sonar.organization", "jonasschaub")
        property("sonar.host.url", "https://sonarcloud.io")
    }
}

//Archives artifacts executed with build
artifacts {
    archives javadocJar, sourcesJar
    archives fatJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId = 'io.github.jonasschaub'
            artifactId = 'FragmentFingerprints'
            version = '1.1.0.0'

            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {

                name = 'FragmentFingerprints'
                description = 'A library to generate fingerprints for molecular structures based on a set of fragments'
                url = 'https://github.com/JonasSchaub/FragmentFingerprints'

                //this way, properties can be added:
                //properties = [
                //myProp: "value",
                //"prop.with.dots": "anotherValue"
                //]

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'B-s123'
                        name = 'Betuel Sevindik'
                        email = 'betuel.sevindik@studmail.w-hs.de'
                        url = 'https://github.com/B-s123'
                    }
                    developer {
                        id = 'FelixBaensch'
                        name = 'Felix Baensch'
                        email = 'felix.baensch@w-hs.de'
                        url = 'https://github.com/FelixBaensch'
                    }
                    developer {
                        id = 'JonasSchaub'
                        name = 'Jonas Schaub'
                        email = 'jonas.schaub@uni-jena.de'
                        url = 'https://github.com/JonasSchaub'
                    }
                    developer {
                        name = 'Christoph Steinbeck'
                        email = 'christoph.steinbeck@uni-jena.de'
                        url = 'https://cheminf.uni-jena.de/members/steinbeck/'
                    }
                    developer {
                        name = 'Achim Zielesny'
                        email = 'achim.zielesny@w-hs.de'
                        url = 'https://www.w-hs.de/service/informationen-zur-person/person/zielesny/'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/JonasSchaub/FragmentFingerprints.git'
                    developerConnection = 'scm:git:ssh://github.com/JonasSchaub/FragmentFingerprints.git'
                    url = 'https://github.com/JonasSchaub/FragmentFingerprints/'
                }
            }
        }
    }
    repositories {
        maven {
            //these two lines did not work because dir() apparently asks for a local path
            //def releasesRepoUrl = layout.buildDirectory.dir('https://s01.oss.sonatype.org/content/repositories/releases/')
            //def snapshotsRepoUrl = layout.buildDirectory.dir('https://s01.oss.sonatype.org/content/repositories/snapshots/')

            //TODO: is this actually the way to fully automatically do it?
            //def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            //def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            //url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            //after publishing, go to https://s01.oss.sonatype.org, log in, close the staged repo, and release it if everything worked out
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                //uses keys and passwords declared in userhome/.gradle/gradle.properties
                //username = property("ossrhUsername") as String
                //password = property("ossrhPassword") as String
                //uses environment variables declared in yml file which passes GitHub secrets to it
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    //uses keys and passwords declared in userhome/.gradle/gradle.properties, works locally
    //sign publishing.publications.mavenJava

    //uses environment variables declared in yml file which passes GitHub secrets to it
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}